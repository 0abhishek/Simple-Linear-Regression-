# import all libraries required in this notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

#Data Wrangling
# Read data from remote link
# Importing the dataset
url = "http://bit.ly/w-data"
#Creating a dataframe to store the dataset
df = pd.read_csv(url)

df.head(10)

#Generating statistical insights from the dataset
df.describe()

#View the datatype of each columns within the dataset
df.dtypes

#check if there exists any missing/null values within the dataset
df.isnull().sum()

#EDA
#Plotting the distribution of scores

df.plot(x='Hours',y='Scores',style='o')
plt.title('Hours v/s Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score');

X = df.iloc[:,:-1].values
y = df.iloc[:,1].values

#train-test-split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=0)

#import linear regression from sklearn.linear_model
from sklearn.linear_model import LinearRegression

#create an object of the given class
lm = LinearRegression()

#fit the train and test set within the model
lm.fit(X_train,y_train);

#Plotting the regression line
line = lm.coef_*X+lm.intercept_

#Plotting for test data (Scatter plot)
plt.scatter(X,y)
plt.plot(X,line);

y_pred = lm.predict(X_test)

#Comparing actual value v/s predicted value
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) 
      
from sklearn.metrics import mean_squared_error
from math import sqrt
mse = mean_squared_error(y_test,y_pred)
print('MSE of predicted scores = ',mse)
print('RMSE = ',sqrt(mse))
